Before writing the parser or interpreter, I spent a good deal of time writing a
"tokenizer" i.e. a set of functions that take in a file and create a nalFile
structure where all the words in the file are stored in an array.

Functions Tested This Way:
FILE *getFile(nalFile *nf, vList *vl, char const file[]);
intList *getWordSizes(nalFile *nf, vList *vl, FILE *fp);
int wordLength(nalFile *nf, vList *vl, char const *currWord, FILE *fp, intList
   *wordLens);
void tokenizeFile(nalFile *nf, vList *vl, FILE *fp, intList *wordLengths);
void getWord(nalFile *nf, vList *vl, char *word, FILE* fp);
void strAppend(char *word, char c);
bool multiWordString(char const *word);
intNode *allocateNode(int i);
void freeList(intList **nf);
nalFile *initNalFile(void);
void setupNalFile(nalFile *nf, vList *vl);
void terminateNalFile(nalFile **nf);
void terminateAllNalFiles(nalFile *nf);
void wordStep(nalFile *nf, vList *vl, int s);

These were all Unit Tested in:
void test(void);
void testTokenization(void);

Then while I was building the parser, for each syntax rule I added I made a .nal
file which only contained that syntax rule and possibly other syntax rules that
I had already written and tested in this way.
Then I would run these through Valgrind and with the sanitize flags in order to
check that they run correctly and no leaks took place.
I also wrote some files which purposefully produce an ERROR and also run these
in Valgrind and with the sanitize flags (An error would come up but no leaks).

Functions tested this way:
void program(nalFile *nf, vList *vl);
void instrs(nalFile *nf, vList *vl);
void instruct(nalFile *nf, vList *vl);
instr file(nalFile *nf, vList *vl);
instr nalAbort(nalFile *nf, vList *vl);
instr input(nalFile *nf, vList *vl);
instr in2str(nalFile *nf, vList *vl);
instr innum(nalFile *nf, vList *vl);
instr jump(nalFile *nf, vList *vl);
instr nalPrint(nalFile *nf, vList *vl);
instr nalRnd(nalFile *nf, vList *vl);
instr nalIfcond(nalFile *nf, vList *vl);
cond nalIf(nalFile *nf, vList *vl);
instr nalInc(nalFile *nf, vList *vl);
instr nalSet(nalFile *nf, vList *vl);

It's worth noting that even in this section I was able to unit test some of the
functions:

Functions Tested This Way:
char **checkSyntax(nalFile *nf, vList *vl,
   char syntax[MAXSYNTAXWORDS][MAXSYNTAXWORDSIZE], int syntaxSize,
   int varconsToBeFound);
bool correctVARCON(char *varconType, char *word);
void freeArray(char **array, int size);
bool validVar(char const *word, char c);
bool isstrcon(char const *word);
bool isnumvar(char const *word);
bool isstrvar(char const *word);
bool isnumcon(char const *word);
bool isvar(char const *word);
bool iscon(char const *word);
bool isvarcon(char const *word);
bool isstr(char const *word);
bool isnum(char const *word);

These were all Unit Tested in:
void testParsingFunctions(void);
void testCheckSyntax(void);

Here, when running a .nal file which only contained a "{", the terminal would
give me an error, and that was because when moving from a word to the next one
I was simply increasing the word index (i.e. nf->currWord++).
But what happens if the word is the last one? Then when reading the next word,
the program will try to read outside the array!
To fix this i wrote the function wordStep(), which increases the word index by s
 while also returning an error if the new index is not within the array.

Now, before moving on to the interpreter, I wrote vList.c, which is simply the
set of functions I need to play with variables. That code is a simpler version
of our mvm.c that is more approriate for what our variables need to look like.
I tested that code in testvList.c, the testing can be executed via the makefile
vList.mk, using rule "memleaks".

The testing for these functions was easy, I slightly alterated the testing setup
that we had for mvm and simply run that. Since the functions in vList.c are
relatively simple I didn't encounter any bugs (excluded a couple of the usual
syntax errors and whatnot).

Finally, while building the interpreter I mainly used two strategies:

1. For each syntax rule I tried to encapsulate as much of the "interpreting" as
possible into one or more functions which give some output, that way I was able
to do normal Unit Testing on most of the interpreting of the syntax rules.

Functions Tested This Way:
char *getString(char const* word);
char ROT(char c);
char ROTbase(char c, char base, int rotVal, int alphabet);
bool isnumber(char c);
char *extractStr(vList *vl, char *name);
double extractNum(vList *vl, char *name,bool *error);
void setRandom(vList *vl, char *name);
void setVariable(nalFile *nf, vList *vl);
bool validSet(char *name, char *val);
void incVar(nalFile *nf, vList *vl, char **varname);
void skipToMatchingBracket(nalFile *nf, vList *vl);
comp compStrings(nalFile *nf, vList *vl, char **strs);
comp compNums(nalFile *nf, vList *vl, char **nums);
comp compDoubles(double n1, double n2);
bool condCheck(nalFile *nf, vList *vl, char *condition, char **varcons);
bool condCalled(char const *word);

These were all Unit Tested in:
void testInterpFunctions(void);
void testROT(void);
void testGetString(char const* word, char const* realStr);
void testIfCond(void);
void testSet(void);

Here is when I caught a very severe issue with my code:
If my code encountered a closing bracket "}", instrs() would simply return,
without increasing the file index! So if we were inside a conditional and a "}"
was found, all the currently open instrs() would see this "}" and terminate,
until even the main instrs() terminated and the program would stop and it
would output without an error message or anything!
So all of this time if in any of the .nal file I parsed for testing had more
than one "}", the program would have just stopped parsing at the first "}"
and just said "Parsed OK".
Thankfully I was able to catch this, and simply change my instrs() function a
little to make it take a step if it found a "}".

Now let's get back to my 2 testing strategies for the interpreter.

Strategy 1 wasn't possible for every syntax rule: <INPUT> and <PRINT(N)> either
require user input or print to screen, so they can't be normally unit tested.

This brought me to my second strategy:

2. I have a different #ifdef NAME for each syntax rule (i.e. #ifdef INTPRINT for
<PRINT>). This way I can test how the interpreter deals with a single syntax
rule while just parsing over all the other rules by compiling with only the
required -DNAME flag (i.e. -DINTPRINT for <PRINT>). And running a .nal file on
this partial interpreter.
A good thing about this is that I was able to combine the various -DNAMEs of
various interpreter functions in order to check that they worked properly in
combination. For example if I wanted to check if <PRINT> was able to print a
variable that was <SET>, I would compile with -DINTPRINT and -DINTSET, so all
instructions would just be parsed over except for <SET> and <PRINT>.

Functions Tested This Way:
void insertInputStrings(nalFile *nf, vList *vl, char **varnames);
void insertInputNum(nalFile *nf, vList *vl, char** name);
void print(nalFile *nf, vList *vl, char *varcon);
(I tested every other interpreter function again with this method as well)

The main strength of my strategy was the flexibility of it, I was able to write
one syntax rule, test it, then write the next one, test it, and I was then able
to first check whether my syntax rule worked individually, and then whether it
worked in combination with one or more of the other syntax rules.

The main weakness of this strategy is that I had to write a lot of .nal files
myself.

The only issue that I am aware of but wasn't able to deal with, is that when
<JUMP>ing from outside an <IFCOND> to inside one, the program would terminate
when it finds the "}" at the end of the <IFCOND> rather than at the end of the
program.

All of the .nal file I used for testing can be run simply with the "test" rule
in the Makefile.
The files that are meant to trigger errors are tf1.nal to tf14.nal, these are
also run in the Makefile but with the "-" flag which ignores errors.
